on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.0.0

      - name: Build
        run: |
          # Add your build commands here
  test:
    name: 'Test'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.0.0

      - name: Test
        run: |
          # Add your test commands here
  uat:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.0.0

      - name: UAT Test
        run: |
          # Add your UAT test commands here
  change:
    # jobs that must complete successfully before this job will run
    needs: uat
    # type of machine to run the job on
    runs-on: ubuntu-latest
    name: 'ServiceNow DevOps Change'
    steps:
        - name: Checkout
          uses: actions/checkout@v4.0.0
        - name: ServiceNow Change
          uses: ServiceNow/servicenow-devops-change@v3.1.0
          with:
            # Devops Integration Token
            devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
            # ServiceNow Instance URL
            instance-url: ${{ secrets.SN_INSTANCE_URL }}
            # Orchestration Tool Id
            tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
            # GitHub Context
            context-github: ${{ toJSON(github) }}
            # Display Name of the Job
            job-name: 'ServiceNow DevOps Change'
            change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group": {"name": "DevOps Connect"},"assigned_to": {"name": "Hrijula Bose"},"requested_by": {"name": "Alpaslan Kaya"},
            "implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.",
            "backout_plan":"When software fails in production, the previous software release will be re-deployed.","u_mitigation_for_operational_impact":"Redirect traffic to another environment","u_time_for_mitigation_to_complete":"15-30 minutes","u_mitigation_is_successfully_tested":"No","u_validation_type":"Technical validation as part of this RFC","test_plan":"Testing if the software was successfully deployed"}}'
    
